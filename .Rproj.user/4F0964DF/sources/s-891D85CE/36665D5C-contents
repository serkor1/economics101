# This script stores
# all finished functions


# Calculate Intersections; ####


intersection_function <- function(curve_1, curve_2) {
  
  # This function takes two
  # lists of curves in order to calculate
  # the intersection between the two.
  # each curve is represented as a tibble
  # of X- and Y-values
  x_val <- curve_1$x
  
  
  curve_1 <- approxfun(
    x = curve_1$x,
    y = curve_1$y,
    rule = 2
  )
  
  curve_2 <- approxfun(
    x = curve_2$x,
    y = curve_2$y,
    rule = 2
  )
  
  
  # Calculate Intersections; 
  x_int <- uniroot(
    function(x) curve_1(x) - curve_2(x),
    c(min(x_val), max(x_val)))$root
  
  
  return(
    tibble(
      x_int = x_int,
      y_int = curve_2(x_int)
    )
  )
  
  
}


# Supply and Demand Functions; ####


# Demand function;
demand_function <- function(shock = NULL, coeff = 2, tax = NULL) {
  
  # TODO: Change the flow
  # so it doesnt overwrite itself.
  
  x = seq(from = 0, to = 10, length.out = 100)
  y = -coeff * x + 20
  
  if (!is.null(tax)) {
    
    # If the Tax is not null
    # it is eitehr lumpsump
    # or advalorem
    # TODO: What were the correct
    # terminonology here
    if (tax == "vat") {
      
      y = -(coeff * 0.75) * x + 20
      
      
    }
    
    
  } else {
    
    
    y = -coeff * x + 20
    
    
  }
  
  
  
  
  
  
  if (!is.null(shock)) {
    
    y_old = y
    
    if (shock == "pos") {
      
      y = y + 5
      
    } else {
      
      y = y - 5
    }
    
    
    data <- tibble(
      x = x,
      y_old = y_old,
      y = y
    )
    
    
  } else {
    
    data <-  tibble(
      x = x,
      y = y
    )
    
  }
  
  
  data <- data %>% filter(
    !(across(y) < 0)
  )
  
  return(
    data
  )
}





supply_function <- function(shock = NULL, coeff = 2) {
  
  x = seq(from = 0, to = 10, length.out = 100)
  y = coeff * x
  
  
  if (!is.null(shock)) {
    
    print("Shock Supoply")
    
    y_old = y
    
    if (shock == "pos") {
      
      y = y - 5
      
    } else {
      
      y = y + 5
    }
    
    
    data <- tibble(
      x = x,
      y_old = y_old,
      y = y
    )
    
    
  } else {
    
    print("Else")
    
    data <-  tibble(
      x = x,
      y = y
    )
    
  }
  
  
  
  
  
  data <-  data %>% filter(
    !(across(y) > 20)
  )
  
  return(
    data
  )
}



# Equilibrium Plots; ####





equilibrium_plot <- function(demand, supply, advanced) {
  
  
  # Demand Curve
  demand_curve <- demand
  supply_curve <- supply
  
  
  # Remove Everything 
  
  
  
  
  # Original Intersections;
  # between the initial values
  intersection <- intersection_function(
    curve_1 = demand_curve,
    curve_2 = supply_curve
  )
  
  
  
  base_plot <- plot_ly(
    data = supply_curve
  ) %>% add_lines(
    x = ~x,
    y = ~y,
    line = list(
      color = "steelblue"
    ),
    name = "Supply"
  ) %>% add_lines(
    inherit = FALSE,
    data    = demand_curve,
    x = ~x,
    y = ~y,
    line = list(
      color = "darkred"
    ),
    name = "Demand"
  )
  
  
  # If we add a Shock/Tax to either side
  # there will be three variables instead of two.
  # In any case there is a movement.
  if (ncol(demand_curve)>2){
    
    
    
    base_plot <- base_plot %>% 
      add_lines(
        inherit = TRUE,
        data    = demand_curve,
        x       = ~x,
        y       = ~y_old,
        line = list(
          color = "darkred",
          dash  = "dot"
        ),
        name = "Demand"
      )
    
    
  }
  
  if (ncol(supply_curve)>2){
    
    
    
    base_plot <- base_plot %>% 
      add_lines(
        inherit = TRUE,
        data    = supply_curve,
        x       = ~x,
        y = ~ y_old,
        line = list(
          color = "steelblue",
          dash  = "dot"
        ),
        name = "Supply"
      )
    
    
  }
  
  
  
  ribbon_demand <- demand_curve %>% filter(x <= intersection$x_int)
  ribbon_supply <- supply_curve %>% filter(x <= intersection$x_int)
  
  base_plot <- base_plot %>% add_segments(
    x = 0,
    y = intersection$y_int ,
    xend = intersection$x_int,
    yend = intersection$y_int,
    line = list(
      color = "gray",
      dash  = "dot"
    ),
    showlegend = FALSE
  ) %>% add_segments(
    x = intersection$x_int,
    y = 0,
    xend = intersection$x_int,
    yend = intersection$y_int,
    line = list(
      color = "gray",
      dash = "dot"
    ),
    showlegend = FALSE
  ) %>% layout(
    xaxis = list(
      range = c(0,10),
      title = "Quantity"
    ),
    yaxis = list(
      range = c(0,30),
      title = "Price"
    )
  ) 
  
  if (advanced) {
    
    
    # Add Consumer and
    # producer Surplus
    
    base_plot <- base_plot %>% add_ribbons(
      x = ribbon_supply$x,
      ymin = ribbon_supply$y,
      ymax = intersection$y_int,
      name = "Producer Surplus",
      fillcolor = "steelblue",
      opacity = 0.2
    ) %>% add_ribbons(
      x = ribbon_demand$x,
      ymax = ribbon_demand$y,
      ymin = intersection$y_int,
      name = "Consumer Surplus",
      fillcolor = "darkred",
      opacity = 0.2
    )
    
    
    # Add Tax-revenue
    
    
  }
  
  
  
  
  base_plot
  
  
  
  
  
  
  
  
  
  
  
}

# Stats table

stat_table <- function(supply, demand, advanced) {
  
  
  # Calculate the Intersection between the curves;
  intersections <- intersection_function(
    curve_1 = supply,
    curve_2 = demand
  )
  
  
  # Calculate PS and CS
  producer_surplus <- ( intersections$y_int * intersections$x_int ) / 2
  consumer_surplus <- (( max(demand$y) - intersections$y_int) * intersections$x_int) / 2
  total_welfare <-  consumer_surplus + producer_surplus
  price <- intersections$y_int
  quantity <- intersections$x_int
  
  
  
  
  
  
  # Stats;
  stat_table <- tibble(
    price,
    quantity,
    consumer_surplus,
    producer_surplus,
    total_welfare
  )
  
  
  
  if (isFALSE(advanced)) {
    
    
    stat_table <- stat_table %>% 
      select(
        "price", "quantity"
      )
    
  }
  
  
  
  stat_table  %>% pivot_longer(
    cols = everything(),
    names_to = "Measure",
    values_to = "Value"
  ) 
  
  
  
}






